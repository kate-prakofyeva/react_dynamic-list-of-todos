{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/SelectType.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","currentTodo","setCurrentTodo","handleClick","todo","className","map","id","completed","title","type","onClick","classNames","TodoFilter","query","setQuery","selectedOption","setSelectedOption","value","onChange","event","selectValue","target","placeholder","inputValue","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectType","TodoModal","useState","user","setUser","isLoading","setIsLoading","error","setError","useEffect","loadData","a","userId","data","Error","borderBottomLeftRadius","borderBottomRightRadius","href","email","name","App","setTodos","All","filteredByQuery","useCallback","filter","toLowerCase","includes","filteredByOptions","Active","Completed","todosWihtFilters","useMemo","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e886713a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todos: Todo[] | null,\n  currentTodo: Todo | null,\n  setCurrentTodo: React.Dispatch<React.SetStateAction<Todo | null>>,\n};\n\nexport const TodoList = ({ todos, currentTodo, setCurrentTodo } : Props) => {\n  const handleClick = (todo : Todo) => () => {\n    if (currentTodo !== todo) {\n      setCurrentTodo(todo);\n    }\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos && (\n          todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className=\"\"\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={handleClick(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far',\n                      {\n                        'fa-eye-slash': currentTodo === todo,\n                        'fa-eye': currentTodo !== todo,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        )}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport { ChangeEvent } from 'react';\n\ntype Props = {\n  query: string,\n  setQuery: React.Dispatch<React.SetStateAction<string>>,\n  selectedOption: string,\n  setSelectedOption: React.Dispatch<React.SetStateAction<string>>,\n};\n\nexport const TodoFilter = ({\n  query,\n  setQuery,\n  selectedOption,\n  setSelectedOption,\n} : Props) => {\n  const handleChangeSelect = (event : ChangeEvent<HTMLSelectElement>) => {\n    const selectValue = event.target.value;\n\n    setSelectedOption(selectValue);\n  };\n\n  const handleChangeInput = (event: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n\n    setQuery(inputValue);\n  };\n\n  const resetInput = () => {\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={handleChangeSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetInput}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo, User } from './types';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SelectType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo, User } from '../../types';\n\ntype Props = {\n  currentTodo: Todo | null,\n  setCurrentTodo: React.Dispatch<React.SetStateAction<Todo | null>>,\n};\n\nexport const TodoModal = ({ currentTodo, setCurrentTodo } : Props) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n\n      try {\n        if (currentTodo) {\n          const data = await getUser(currentTodo.userId);\n\n          setUser(data);\n        }\n      } catch (err : unknown) {\n        if (err instanceof Error) {\n          setError('404 User Not Found');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, [currentTodo]);\n\n  return (\n    <div\n      className={classNames('modal', {\n        'is-active': currentTodo,\n      })}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            { error && (\n              <>\n                <header\n                  className=\"modal-card-head\"\n                  style={{\n                    borderBottomLeftRadius: 6,\n                    borderBottomRightRadius: 6,\n                  }}\n                >\n                  <div\n                    className=\"modal-card-title has-text-weight-medium\"\n                  >\n                    {error}\n                  </div>\n\n                  {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                  <button\n                    type=\"button\"\n                    className=\"delete\"\n                    onClick={() => setCurrentTodo(null)}\n                  />\n                </header>\n              </>\n            )}\n            { !error && user && currentTodo && (\n              <>\n                <header className=\"modal-card-head\">\n                  <div\n                    className=\"modal-card-title has-text-weight-medium\"\n                    data-cy=\"modal-header\"\n                  >\n                    {`Todo #${currentTodo.id}`}\n                  </div>\n\n                  {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                  <button\n                    type=\"button\"\n                    className=\"delete\"\n                    data-cy=\"modal-close\"\n                    onClick={() => setCurrentTodo(null)}\n                  />\n                </header>\n\n                <div className=\"modal-card-body\">\n                  <p className=\"block\" data-cy=\"modal-title\">\n                    {currentTodo.title}\n                  </p>\n\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {/* <strong className=\"has-text-success\">Done</strong> */}\n                    <strong\n                      className={currentTodo.completed\n                        ? 'has-text-success'\n                        : 'has-text-danger'}\n                    >\n                      {currentTodo.completed\n                        ? 'Done'\n                        : 'Planned'}\n                    </strong>\n\n                    {' by '}\n                    <a href={`mailto:${user?.email}`}>\n                      {user?.name}\n                    </a>\n                  </p>\n                </div>\n              </>\n            ) }\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { SelectType, Todo } from './types';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [query, setQuery] = useState<string>('');\n  const [selectedOption, setSelectedOption] = useState<string>(SelectType.All);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getTodos();\n\n        setTodos(data);\n      } catch (err : unknown) {\n        if (err instanceof Error) {\n          setError('404 Not Found');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const filteredByQuery = useCallback((data : Todo[]) => {\n    return data.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  }, [query]);\n\n  const filteredByOptions = useCallback((data : Todo[]) => {\n    switch (selectedOption) {\n      case SelectType.Active:\n        return data.filter(todo => !todo.completed);\n      case SelectType.Completed:\n        return data.filter(todo => todo.completed);\n      case SelectType.All:\n      default:\n        return data;\n    }\n  }, [selectedOption]);\n\n  const todosWihtFilters = useMemo(() => {\n    let result:Todo[] = [...todos];\n\n    result = filteredByQuery(result);\n    result = filteredByOptions(result);\n\n    return result;\n  }, [todos, filteredByOptions, filteredByQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                selectedOption={selectedOption}\n                setSelectedOption={setSelectedOption}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {error && <p>{error}</p>}\n                    {todos && (\n                      <TodoList\n                        todos={todosWihtFilters}\n                        currentTodo={currentTodo}\n                        setCurrentTodo={setCurrentTodo}\n                      />\n                    )}\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} setCurrentTodo={setCurrentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}